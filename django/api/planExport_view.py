from io import BytesIO
import string
from django.db.models.fields import DateField
import datetime
from django.contrib.auth.decorators import login_required, permission_required
from .models import Messe, Mini, Plan
from django.shortcuts import get_object_or_404
from django.http import FileResponse
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from reportlab.platypus import Paragraph, Spacer, Flowable, KeepTogether, SimpleDocTemplate
from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import cm, mm
from reportlab.pdfbase.pdfmetrics import stringWidth
from django.utils.encoding import escape_uri_path
from MiniApp.settings import BASE_DIR, logger
from django.core.exceptions import PermissionDenied

### Helper
def date2String(date: DateField):
  return date.strftime("%d.%m.%Y")

BB = BASE_DIR / 'media/background.jpg'
BH = BASE_DIR / 'media/mini.jpg'

w, h = A4


def DayToString(date: int):
  if date == 0:
    return "Montag"
  elif date == 1:
    return "Dienstag"
  elif date == 2:
    return "Mittwoch"
  elif date == 3:
    return "Donnerstag"
  elif date == 4:
    return "Freitag"
  elif date == 5:
    return "Samstag"
  else:
    return "Sonntag"


def generateMesseHeader(messe: Messe) -> string:
  if messe.autogenerated:
    s = date2String(messe.Datum) + " - " + date2String(messe.Datum + datetime.timedelta(days=6))
    if len(messe.Info) > 0:
      s += " " + messe.Info
    return s
  else:
    print = messe.Art.Print
    time = messe.Art.Zeit
    if not messe.Zeit == None:
      time = messe.Zeit
    timeString = str(time)[0:5].replace(':', '.') + " Uhr"
    print = print.replace('$day', DayToString(messe.Datum.weekday()))
    print = print.replace('$time', timeString)
    print = print.replace('$date', date2String(messe.Datum))
    print = print.replace('$info', messe.Info)
    return print

def vorlage(canvas: Canvas, doc):
    canvas.saveState()
    img = ImageReader(BH)
    img_w, img_h = img.getSize()
    scale = (w - 2 * cm) / img_w
    canvas.drawImage(BH, cm, h - 2*cm, width=w - 2*cm, height=img_h*scale, mask='auto')
    img = ImageReader(BB)
    img_w, img_h = img.getSize()
    r = 2*cm
    scale = (w - r) / img_w
    canvas.drawImage(BB, r, r, width=w - 2 * r, height=img_h*scale)
    canvas.restoreState()

def getTitle(title: str) -> Flowable:
    wTxt = stringWidth(title, 'Times-Bold', 20)
    styles = ParagraphStyle(
        name='Normal',
        fontSize=20,
        fontName='Times-Bold',
        leftIndent= (w-6*cm-wTxt) / 2
   )
    p = Paragraph(title, style=styles)
    return p

def getMesse(header: str, minisTxt: str) -> Flowable:
   stylesHead = ParagraphStyle(
    name='Normal',
    fontName='Times-Bold',
    fontSize=11,
   )
   head = Paragraph(text=header, style=stylesHead)
   stylesText = ParagraphStyle(
    name='Normal',
    fontName='Times-Roman',
    fontSize = 9
   )
   text = Paragraph(text=minisTxt, style=stylesText)
   return KeepTogether([head, Spacer(w, 2*mm), text])

def parseMinisToText(messe: Messe) -> str:
  res = ""
  for mini in Mini.objects.filter(Gruppen__Messe=messe, Gruppen__Eingeteilt=True).order_by("MiniTyp", "Geburtsdatum"):
     res += mini.user.first_name + " " + mini.user.last_name + ", "
  if len(res) > 1:
    return res[:len(res) - 2]
  return res

### Klassen ###

### VIEWS ###

#@login_required
#@permission_required(['api.view_plan', 'api.view_messe', 'api.view_gruppe'], raise_exception=True)
def download_plan(request, id):
  logger.debug("Plan wird versucht zu erstellen")
  plan = get_object_or_404(Plan, pk=id)
  
  ### Checke Berechtigung ###
  if request.user.is_authenticated:
    pass # Check Permission
  elif "key" in request.GET:
    import datetime
    if not request.GET["key"] == plan.LinkKey or datetime.datetime.now().date() >= plan.EndDatum + datetime.timedelta(days=7):
      raise PermissionDenied()
  else:
    raise PermissionDenied()
  ### Ende ###

  
  Story = [getTitle(plan.Name), Spacer(w, 2*cm)]

  for messe in plan.Messen.order_by("Datum", "-autogenerated","Zeit"):
    flow = getMesse(generateMesseHeader(messe), parseMinisToText(messe))
    Story.append(flow)
    Story.append(Spacer(w, 5*mm))

  buffer = BytesIO()
  doc = SimpleDocTemplate(buffer, pagesize=A4, title=plan.Name)
  doc.build(Story, onFirstPage=vorlage, onLaterPages=vorlage)
  buffer.seek(0)
  logger.info("Plan erstellet")

  return FileResponse(buffer, as_attachment=True, filename=escape_uri_path(plan.Name + '.pdf'), content_type='application/pdf')