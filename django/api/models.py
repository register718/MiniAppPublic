from django.db import models
from django.utils import timezone
from datetime import datetime
from django.contrib.auth.models import User


class TelegramChat(models.Model):
    chatID = models.IntegerField(default=-1)
    abo = models.BooleanField(default=False)
    verified = models.BooleanField(default=False)
    secretKey = models.IntegerField(default=-1)

    def __str__(self):
        return str(self.mini.all())

class Mini(models.Model):

    MiniTypEnum = (
        (0, 'Obermini'),
        (1, 'Mini'),
        (2, 'Minimini'),
        (3, 'Passiv'),
        (4, 'Verwalter'),
        (5, 'Ausgetreten'),
        (6, 'Sysadmin')
    )

    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='mini')
    Adresse = models.TextField(default="")
    Geburtsdatum = models.DateField(default=timezone.now)
    MiniTyp = models.IntegerField(default=0, choices=MiniTypEnum)
    Geschwister = models.IntegerField(default=-1)
    Telefon = models.CharField(max_length=20, default="0")
    OffsetEinteilung = models.IntegerField(default=0)
    StartEingeteilt = models.IntegerField(default=0)
    telegram = models.ForeignKey(TelegramChat, on_delete=models.SET_NULL, default=None, blank=True, null=True, related_name='mini')
    PateMini = models.ForeignKey('self', default=None, blank=True, null=True, on_delete=models.SET_NULL)
    #TempKey = models.CharField(default=None, blank=True, null=True, max_length=200)

    def __str__(self):
        s = self.user.first_name + " " + self.user.last_name
        if s == " ":
            s = self.user.username
        return s

class MesseArt(models.Model):
    DayOfWeek = models.IntegerField(default=-1)
    Zeit = models.TimeField(default=datetime.now)
    MinisInsgesamt = models.IntegerField(default=2)
    OberminisAnzahl = models.IntegerField(default=2)
    Name = models.TextField()
    Print = models.TextField(default='$date - $day $time $info')

    def __str__(self) -> str:
        return self.Name

def __generateRandomString__():
        import string
        import random
        letters = string.ascii_lowercase
        return ''.join(random.choice(letters) for i in range(200))

class Plan(models.Model):

    PlanArtEnum = (
        (0, 'dragdrop'),
        (1, 'toggle')
    )

    Name = models.CharField(max_length=200)
    PlanArt = models.IntegerField(choices=PlanArtEnum)
    StartDatum = models.DateField(default=datetime.now)
    EndDatum = models.DateField(default=datetime.now)
    DefaultMesseArt = models.ForeignKey(MesseArt, on_delete=models.SET_NULL, blank=True, null=True, default=None)
    Archiviert=models.BooleanField(default=False)
    AbfrageEnde = models.DateField(default=None, null=True, blank=True)
    LinkKey = models.CharField(max_length=200, default=__generateRandomString__)
    #PlanEdit = models.JSONField(default=None, blank=True, null=True)

    def get_AnzahlMessen(self):
        return self.Messen.all().count()

    def __str__(self):
        return self.Name

class Messe(models.Model):
    Datum = models.DateField(default=datetime.now)
    Info = models.TextField(default="", blank=True)
    Art = models.ForeignKey(MesseArt, on_delete=models.CASCADE)
    Plan_id = models.ForeignKey(Plan, on_delete=models.SET_NULL, blank=True, null=True, default=None, related_name='Messen')
    explizit = models.BooleanField(default=False)
    autogenerated = models.BooleanField(default=False)
    Zeit = models.TimeField(default=datetime.now)
    notify = models.IntegerField(default=0)

    def __str__(self):
        return "Messe "  + str(self.Datum) + " " + self.Info

class Gruppe(models.Model):
    Minis = models.ManyToManyField(Mini, related_name='Gruppen')
    Eingeteilt = models.BooleanField(default=False)
    Messe = models.ForeignKey(Messe, on_delete=models.CASCADE, related_name='Gruppen')

    def __str__(self) -> str:
        res = ""
        for m in self.Minis.all():
            res += m.user.first_name +  " "
        return str(self.id) + " " + res

class Abfrage(models.Model):
    Mini = models.ForeignKey(Mini, on_delete=models.CASCADE, related_name='Abfrage')
    Plan = models.ForeignKey(Plan, on_delete=models.CASCADE)
    Key = models.CharField(max_length=100)
    Nachricht = models.TextField(default="")
    edit = models.BooleanField(default=False)

    def __str__(self) -> str:
        return str(self.Mini) + " " + str(self.Plan)