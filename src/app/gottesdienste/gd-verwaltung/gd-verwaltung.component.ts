import { _isNumberValue } from '@angular/cdk/coercion';
import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatSnackBar } from '@angular/material/snack-bar';
import { BehaviorSubject, Observable, of, Subscription } from 'rxjs';
import { DBService } from 'src/app/service/db.service';
import { GottesdiensteService, IGottesdienst } from 'src/app/service/gottesdienste.service';
import { UserService } from 'src/app/service/user.service';
import { BuffObservable } from 'src/app/shared/BufObservable.class';
import { MyDate } from 'src/app/shared/Date.class';
import { IKalenderChange, KalenderAction } from '../caldender/caldender.component';

@Component({
  selector: 'app-gd-verwaltung',
  templateUrl: './gd-verwaltung.component.html',
  styleUrls: ['./gd-verwaltung.component.css'],
})
export class GdVerwaltungComponent implements OnInit, OnDestroy {

  gd_List_Sub: Subscription = null;
  gd_List_Key_Sub: Subscription = null;
  gd_List_Value_Sub: Subscription = null;
  gd_List: {[id:number]:IGottesdienst} = [];
  gd_List_Key: number[] = [];
  gd_List_Value: IGottesdienst[] = [];

  @Input() selectedGdId: number = -1;
  gd_changePermission: boolean = false;
  gd_addPermission: boolean = false;
  gd_form: FormGroup;
  delete_Enabled: boolean = true;
  show_calender: boolean = false;

  constructor(private _formBuilder: FormBuilder, public userService: UserService, private db: DBService, public gdService: GottesdiensteService, private _snackBar: MatSnackBar) { }

  ngOnDestroy(): void {
    console.log("Destroy");
    this.gd_List_Sub.unsubscribe();
    this.gd_List_Key_Sub.unsubscribe();
    this.gd_List_Value_Sub.unsubscribe();
  }

  ngOnInit(): void {
    console.log("INIT");
    if (this.selectedGdId == -1) {
      this.show_calender = true;
    }
    // Kalender Init
    this.calender = new BuffObservable<IKalenderChange>();
    this.setCalenderSub = new BehaviorSubject<Date>(null);

    this.gd_form = this._formBuilder.group({
      id: [-1, Validators.min(-1)],
      Art: ['', Validators.min(0)],
      Datum: ['', Validators.required],
      Info: ['', Validators.maxLength(100)],
      explizit: [false, Validators.required],
      Plan_id: [null, Validators.nullValidator],
      autogenerated: [false, Validators.required],
      notify: [0, Validators.required],
      Zeit: ['', Validators.required, timeValidatorNull]
    });
    this.gd_addPermission = this.userService.has('api.add_messe');
    this.gd_changePermission = this.userService.has('api.change_messe');

    //Lade aktuelle Gottesdienste
    this.gd_List_Sub = this.gdService.gd_List.subscribe({
      next: (val) => {
        this.gd_List = val;
      },
      error: this.db.showLoadError
    });
    const that = this;
    this.gd_List_Value_Sub = this.gdService.gd_List_Value.subscribe((val) => {
      if (val === that.gd_List_Value)
        return;
      that.gd_List_Value = val;
      this.calender.next({action: KalenderAction.deleteAll, eintrag: null});
      for (let i = 0; i < val.length; i++) {
        this.addGdToKalender(val[i]);
      }
      console.log("FERTIG EINTRAG");
    });
    this.gd_List_Key_Sub = this.gdService.gd_List_Key.subscribe({
      next: (val) => {
        this.gd_List_Key = val.sort((a: number, b: number) => { // .filter(val => !this.gd_List[val].autogenerated)
          if (this.gd_List[a].Datum < this.gd_List[b].Datum) {
            return 1;
          }
          return -1;
        });
        console.log("Setze Variable:", this.selectedGdId);
        this.changeCurrentGd(this.selectedGdId);
        //this.gd_form.setControl('id', , {emitEvent: true});  //.setValue(this.selectedGdId, {emitValue: true});;
      },
      error: this.db.showLoadError
    });
    //Alle Gottesdienste Eintragen
    console.log("FERTIG INIT");
  }

  //Enable und danach gleich disable ist eine bisschen pfusch funktioniert aber
  gd_speichern() {
    //this.gd_selected.Datum = this.gd_Date.toISOString().substring(0, 10);
    if (this.selectedGdId !== -1) {
      this.gd_form.controls['id'].enable();
    }
    if (this.gd_form.valid) {
      //Subscribtion

      let func = (result) => {
        if (_isNumberValue(result)) {
          const id = Number(result);
          const gd: IGottesdienst = this.gd_form.value;
          gd.id = id;
          this.gdService.changeGD(gd);
          this.addGdToKalender(this.gd_List[id]);
          this.setCalender(this.gd_List[id].Datum);
          console.log(this.gd_List);
        } else {
          this._snackBar.open("Fehler beim Speichern", 'OK', {duration: 10000});
        }
      };
      //
      const obj: IGottesdienst = this.gd_form.value;
      obj.Datum = new MyDate(obj.Datum);
      if (this.gd_form.value.id === -1) {
        this.db.POST('gottesdienste/messe/neu/', this.gd_form.value).subscribe(func);
      } else {
        this.db.POST('gottesdienste/messe/update/' + this.gd_form.value.id + "/", this.gd_form.value).subscribe((result) => {
          if (result === this.gd_form.value.id) {
            this.gdService.changeGD(this.gd_form.value);
            this._snackBar.open('Gespeichert', 'OK', {duration: 10000})
          } else {
            this._snackBar.open('Konnte nicht gespeichert werden', 'OK', {duration: 10000});
          }
        });
      }
    } else {
      console.log(this.gd_form);
      this._snackBar.open("Eingabedaten stimmen nicht", 'OK', {duration: 10000});
    }
    if (this.selectedGdId !== -1) {
      this.gd_form.controls['id'].disable();
    }
  }

  gd_SelectChanged(value: number) {
    if (value == -1) {
        this.initEmptyGD(null);
     } else {
        this.changeCurrentGd(value);
        this.setCalender(this.gd_List[value].Datum);
     }
  }

  calenderChanged(val: any) {
      if (typeof(val) === 'number') {
        this.changeCurrentGd(val);
      } else {
        if (this.gd_form.value.id === -1)
          this.gd_form.controls['Datum'].setValue(val);
        else
          this.initEmptyGD(val);
      }
  }

  initEmptyGD(datum: Date) {
    const gd: IGottesdienst = {Art: -1, Info: "", Datum: datum, id: -1, Plan_id: null, explizit: false, autogenerated: false, notify: 0, Zeit: ""};
    this.gd_form.setValue(gd, {emitEvent: false});
    this.gd_form.enable();
    this.delete_Enabled = false;
  }

  changeCurrentGd(gdID: number) {
    if (gdID == -1) {
      this.initEmptyGD(null);
      return;
    }
    const gd = this.gd_List[gdID];
    this.gd_form.setValue(gd, {emitEvent: false});
    this.delete_Enabled = !gd.autogenerated;
    if (this.gd_changePermission)
      this.gd_form.enable();
    else {
      this.gd_form.disable();
      this.gd_form.controls['id'].enable();
    }
  }

  deleteMesse() {
    this.db.DELETE('gottesdienste/messe/delete/' + this.gd_form.value.id + '/').subscribe((result) => {
      if (result === true) {
        this.calender.next({
          eintrag: {date: null, Text: null, id: this.gd_form.value.id, emit: null},
          action: KalenderAction.delete
        });
        this.gdService.deleteGD(this.gd_form.value.id);
        this.gd_form.reset();
      }
    });
  }

  calender: BuffObservable<IKalenderChange>;

  addGdToKalender(gd: IGottesdienst) {
    this.calender.next({
      eintrag: {date: gd.Datum, Text:  gd.Zeit + "Uhr " +  (gd.autogenerated ? "Woche" : gd.Info), id: gd.id, emit: gd.id},
      action: KalenderAction.add
    });
  }

  setCalenderSub: BehaviorSubject<Date>;
  setCalender(d: Date) {
    this.setCalenderSub.next(d);
  }

}

function timeValidatorNull(controle: AbstractControl) : Observable<any> {
  if (controle.value == null || controle.value == '')
    return of(null);
  const txt = controle.value.split(':');
  if (txt.length === 2 || txt.length === 3) {
    if (_isNumberValue(txt[0]) && _isNumberValue(txt[1])) {
      const h = Number(txt[0]);
      const min = Number(txt[1]);
      if (0 <= h && h < 24 && 0 <= min && min < 60) {
        console.log("NULL");
        return of(null);
      }
    }
  }
  console.log(controle.value);
  return of({'NotATime':true});
}