import { Injectable, OnDestroy } from "@angular/core";
import { BehaviorSubject, Subscription } from "rxjs";
import { MyDate } from "../shared/Date.class";
import { DBService } from "./db.service";
import { UserService } from "./user.service";
import { Demultiplexer } from "../shared/demultiplexer.class";

export enum MiniplanTyp {
  dragdrop = 0,
  toggle = 1
}

export interface IPlanBase { id: number; Name: string; PlanArt: MiniplanTyp; StartDatum: MyDate; EndDatum: MyDate, DefaultMesseArt: number, AnzahlMessen: number, LinkKey?: string;};
export interface IMesse {Datum: string; Info: string; Art: number; Plan_id: number, id: number, explizit: boolean, autogenerated: boolean};
//export interface IWoche {DatumStart: string, DatumEnd: string, Plan_id: number, id: number};
export interface IMiniGruppe {id: number, Eingeteilt: boolean, Messe: number, Minis: number[], state: string; };
export interface IMesseGruppe {id: number, Gruppen: number[]};

@Injectable({
  providedIn: 'root'
})

export class MiniplanService implements OnDestroy{

  PlanListInst: {[id: number]: IPlanBase} = {};
  PlanList: BehaviorSubject<{[id: number]: IPlanBase}> = new BehaviorSubject({});

  PlanListKeyInst: number[] = [];
  PlanListKey: BehaviorSubject<number[]> = new BehaviorSubject([]);

  private demultiplexer: Demultiplexer;
  private PlanListSub: Subscription = null;
  private PlanListKeySub: Subscription = null;

  constructor(private db: DBService, private userService: UserService) {
    this.PlanListSub = this.PlanList.subscribe(val => this.PlanListInst = val);
    this.PlanListKeySub = this.PlanListKey.subscribe(val => this.PlanListKeyInst = val);
    this.openSocket();
  }

  ngOnDestroy(): void {
    this.demultiplexer.stop();
    this.PlanListSub.unsubscribe();
    this.PlanListKeySub.unsubscribe();
  }

  private openSocket() {
    const s = this.db.socket.multiplex(
      () => ({'type':'plan', 'action':'subscribe'}),
      () => ({'type':'plan', 'action':'unsubscribe'}),
      message => message['type'] != undefined && message['type'].startsWith('plan')
    )
    this.demultiplexer = new Demultiplexer(s, 'plan');
    this.demultiplexer.subscribe('getPlanSet', (a) => this.getPlanSet(a), ['data']);
    this.demultiplexer.start();
  }

  getPlanSet(data) {
    const res: IPlanBase[] = data['data'];
    const plaene: {[id: number]: IPlanBase} = this.PlanListInst;
      for (let i: number = 0; i < res.length; i++) {
        plaene[res[i].id] = res[i];
        plaene[res[i].id].StartDatum = new MyDate(res[i].StartDatum);
        plaene[res[i].id].EndDatum = new MyDate(res[i].EndDatum);
      }
      this.PlanList.next(plaene);
      this.sendSpecialPlanList(plaene);
      console.log("PlÃ¤ne", plaene);
  }

  changePlan(plan: IPlanBase) {
      //this.db.POST('gottesdienste/changePlan/' + plan.id.toString(), plan).subscribe( res => {
      //    console.log(res);
      //});
      this.db.socket.next({
        'type':'plan',
        'action':'changePlan',
        'data':plan
      });
  }

  private sendSpecialPlanList(val: {[id: number]: IPlanBase}) {
    const p = Object.keys(val).map(Number);
    this.PlanListKey.next(p);
  }

  ArtToLink(i: MiniplanTyp) {
      if (i === MiniplanTyp.dragdrop) {
          return 'normal';
      } else if (i === MiniplanTyp.toggle) {
          return 'sonder';
      } else {
          return '';
      }
  }

  public ws_setEinteilen(gID: number, val: boolean) {
    this.db.socket.next({
      type: 'gruppe',
      action: 'setEingeteilt',
      gruppe: gID,
      val: val
    });
  }

  public ws_removeGruppe(gruppenID: number[]) {
    this.db.socket.next({
      type: 'gruppe',
      action: 'removeGruppe',
      id: gruppenID
    });
  }

  public ws_addGruppe(minis: number[], messe: number, eingeteilt: boolean) {
    this.db.socket.next({
      type: 'gruppe',
      action: 'addGruppe',
      Eingeteilt: eingeteilt,
      Messe: messe,
      Minis: minis
    });
  }

  public ws_changeMesse(messeID: number, gruppeID: number) {
    this.db.socket.next({
      type: 'gruppe',
      action: 'changeMesse',
      messe: messeID,
      gruppe: gruppeID
  });
  }
}
